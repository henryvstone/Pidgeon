<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_pidgeon1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variable Creation

px = room_width / 2; //starting position x
py = room_height / 2; //starting position y
pz = 0; //starting position z, currently not implemented

moveSpeed = 200; //pixels per second
charge = -0.5; //starting charge
decharge = 0.01; //amount of decrease per second, 1 is max charge 0 is no charge

global.level = 0;
global.gameover = false;
sprite_base = sprite_index;

jump_duration = 0.25 * room_speed; // How long a jump should go for
is_jumping = false;
can_be_hit = true;

depth = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_be_hit = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// No more jumping
image_angle = 0;
is_jumping = false;
pz = 0;
moveSpeed = 0.25*moveSpeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement

// Movement Keys
var moveUp = keyboard_check(ord("W"));
var moveDown = keyboard_check(ord("S"));
var moveLeft = keyboard_check(ord("A"));
var moveRight = keyboard_check(ord("D"));

// Left-Right
var lr = 0;
if(moveLeft){lr -= 1;}
if(moveRight){lr += 1;}

// Up-Down
var ud = 0;
if(moveDown){ud += 1;}
if(moveUp){ud -= 1;}

// Check game over
if (global.gameover) {
    lr = 0;
    ud = 0;
}

// Moving
if(lr != 0 or ud != 0){
    var sp = delta_time / 1000000 * moveSpeed / sqrt(lr * lr + ud * ud);
    
    px += lr * sp;
    py += ud * sp;
}


// Collisions
if(place_meeting(x, py, object_cant_walk) &amp;&amp; pz = 0){
    py = y;
}else{
    y = py;
}

if(place_meeting(px, y, object_cant_walk) &amp;&amp; pz = 0){
    px = x;
}else{
    x = px;
}

if(place_meeting(x, py, object_cant_jump)){
    py = y;
}else{
    y = py;
}

if(place_meeting(px, y, object_cant_jump)){
    px = x;
}else{
    x = px;
}

charge -= delta_time / 1000000 * decharge;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Jump animation
if (is_jumping) {
    image_angle = random(360);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update level and sprite

if (charge &gt;= -1 &amp;&amp; charge &lt; 0) {
    global.level = 0;
    sprite_index = sprite_base ;
} else if (charge &gt;= 0 &amp;&amp; charge &lt; 1) {
    global.level = 1;
    sprite_index = sprite_base + 1;
} else if (charge &gt;= 1 &amp;&amp; charge  &lt; 2) {
    global.level = 2;
    sprite_index = sprite_base + 2;
} else if (charge &gt;= 2) {
    global.level = 3;
    sprite_index = sprite_base + 3;
} else if (charge &lt;= -1) {
    global.level = -1
    global.gameover = true;
    sprite_index = sprite_base + 4;
} else {
    sprite_index = sprite_base;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Press R to restart

var restart_key = keyboard_check_pressed(ord("R"));

if (restart_key &amp;&amp; global.gameover) {
    game_restart();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update depth

depth = -y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="object_npc_car">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!is_jumping &amp;&amp; can_be_hit) {
    charge -= 1.00;
    can_be_hit = false;
    alarm[1] = 100;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="object_bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Lose charge upon hit of bullet

if (!is_jumping) {
    charge -= 0.05;
    with(other){
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="object_food">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>charge += 0.15 * power(0.7, global.level);

with(other){
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
var ux = 0;
var uy = window_get_height() - 20;
var width = window_get_width();
var height  = 20;


draw_set_colour(make_colour_rgb(150, 0, 0));
draw_rectangle(ux, uy, ux + (width * (charge + 1) / 5), uy + height, false);
draw_set_colour(make_colour_rgb(0, 0, 0));
draw_rectangle(ux, uy, ux + width, uy + height, true);

for(var i = 0;i &lt;= 4;i++){
    draw_line(ux + (width * (i + 1) / 5), uy, ux + (width * (i + 1) / 5), uy + height);
}

if (charge &lt;= -1) {
    draw_sprite(sprite_gameover, -1, room_width / 2, room_height / 2);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Jump mechanics

if (!is_jumping) {
    alarm[0] = jump_duration;
    pz = 1;
    is_jumping = true;
    moveSpeed = 4*moveSpeed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
